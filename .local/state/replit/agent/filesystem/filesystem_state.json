{"file_contents":{"app.py":{"content":"from flask import Flask, render_template, request, jsonify, redirect, url_for, session, send_file\nfrom werkzeug.utils import secure_filename\nfrom functools import wraps\nimport sqlite3\nimport os\nfrom datetime import datetime\nimport zipfile\nimport io\nimport hashlib\n\napp = Flask(__name__)\napp.secret_key = os.environ.get('SESSION_SECRET', 'ecocycle-secret-key-2024')\n\n# Configuration\nUPLOAD_FOLDER = 'uploads'\nALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'bmp', 'webp', 'svg', 'ico', 'tiff'}\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\napp.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size\n\n@app.after_request\ndef add_no_cache_headers(response):\n    response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'\n    response.headers['Pragma'] = 'no-cache'\n    response.headers['Expires'] = '0'\n    return response\n\n# Database initialization\ndef init_db():\n    \"\"\"Initialize the SQLite database with all required tables\"\"\"\n    conn = sqlite3.connect('ecocycle.db')\n    c = conn.cursor()\n    \n    # Students table (now users table with authentication)\n    c.execute('''CREATE TABLE IF NOT EXISTS students\n                 (id INTEGER PRIMARY KEY AUTOINCREMENT,\n                  name TEXT NOT NULL,\n                  username TEXT UNIQUE,\n                  password_hash TEXT,\n                  department TEXT NOT NULL,\n                  residence TEXT NOT NULL,\n                  points INTEGER DEFAULT 0,\n                  total_points_earned INTEGER DEFAULT 0,\n                  phone TEXT NOT NULL,\n                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')\n    \n    # Add total_points_earned column if it doesn't exist (for existing databases)\n    try:\n        c.execute('ALTER TABLE students ADD COLUMN total_points_earned INTEGER DEFAULT 0')\n        # Backfill total_points_earned from existing points column for migration\n        c.execute('UPDATE students SET total_points_earned = points WHERE total_points_earned = 0')\n        conn.commit()\n    except sqlite3.OperationalError:\n        # Column already exists\n        pass\n    \n    # Ensure existing records have total_points_earned backfilled (idempotent migration)\n    # This handles cases where total_points_earned was added but not backfilled\n    try:\n        c.execute('UPDATE students SET total_points_earned = points WHERE total_points_earned = 0 AND points > 0')\n        conn.commit()\n    except:\n        pass\n    \n    # Waste logs table with approval and photo upload support\n    c.execute('''CREATE TABLE IF NOT EXISTS waste_logs\n                 (id INTEGER PRIMARY KEY AUTOINCREMENT,\n                  student_id INTEGER,\n                  waste_type TEXT NOT NULL,\n                  quantity INTEGER DEFAULT 1,\n                  points_earned INTEGER DEFAULT 10,\n                  scanned_code TEXT,\n                  image_path TEXT,\n                  approval_status TEXT DEFAULT 'pending',\n                  approved_by INTEGER,\n                  logged_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                  FOREIGN KEY (student_id) REFERENCES students (id),\n                  FOREIGN KEY (approved_by) REFERENCES admins (id))''')\n    \n    # Add image_path column if it doesn't exist (for existing databases)\n    try:\n        c.execute('ALTER TABLE waste_logs ADD COLUMN image_path TEXT')\n    except sqlite3.OperationalError:\n        pass\n    \n    # Admins table\n    c.execute('''CREATE TABLE IF NOT EXISTS admins\n                 (id INTEGER PRIMARY KEY AUTOINCREMENT,\n                  username TEXT UNIQUE NOT NULL,\n                  password_hash TEXT NOT NULL,\n                  full_name TEXT NOT NULL,\n                  email TEXT,\n                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')\n    \n    # Rewards table\n    c.execute('''CREATE TABLE IF NOT EXISTS rewards\n                 (id INTEGER PRIMARY KEY AUTOINCREMENT,\n                  name TEXT NOT NULL,\n                  description TEXT,\n                  points_required INTEGER NOT NULL,\n                  image_path TEXT,\n                  available INTEGER DEFAULT 1,\n                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')\n    \n    # Redeemed rewards table\n    c.execute('''CREATE TABLE IF NOT EXISTS redeemed_rewards\n                 (id INTEGER PRIMARY KEY AUTOINCREMENT,\n                  student_id INTEGER,\n                  reward_id INTEGER,\n                  redeemed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                  FOREIGN KEY (student_id) REFERENCES students (id),\n                  FOREIGN KEY (reward_id) REFERENCES rewards (id))''')\n    \n    # Developers table\n    c.execute('''CREATE TABLE IF NOT EXISTS developers\n                 (id INTEGER PRIMARY KEY AUTOINCREMENT,\n                  name TEXT NOT NULL,\n                  role TEXT NOT NULL,\n                  image_path TEXT,\n                  bio TEXT,\n                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')\n    \n    # Sponsors/Collaborators table\n    c.execute('''CREATE TABLE IF NOT EXISTS sponsors\n                 (id INTEGER PRIMARY KEY AUTOINCREMENT,\n                  name TEXT NOT NULL,\n                  logo_path TEXT,\n                  website TEXT,\n                  description TEXT,\n                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')\n    \n    # Waste collection booths table\n    c.execute('''CREATE TABLE IF NOT EXISTS booths\n                 (id INTEGER PRIMARY KEY AUTOINCREMENT,\n                  name TEXT NOT NULL,\n                  location_name TEXT NOT NULL,\n                  latitude REAL NOT NULL,\n                  longitude REAL NOT NULL,\n                  opening_hours TEXT,\n                  contact TEXT,\n                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')\n    \n    # Site settings table for navbar background and other customizations\n    c.execute('''CREATE TABLE IF NOT EXISTS site_settings\n                 (id INTEGER PRIMARY KEY CHECK (id = 1),\n                  navbar_bg_image TEXT,\n                  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')\n    \n    # Contact messages table\n    c.execute('''CREATE TABLE IF NOT EXISTS contact_messages\n                 (id INTEGER PRIMARY KEY AUTOINCREMENT,\n                  name TEXT NOT NULL,\n                  email TEXT NOT NULL,\n                  subject TEXT,\n                  message TEXT NOT NULL,\n                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')\n    \n    # Add is_active column to students table if it doesn't exist\n    try:\n        c.execute('ALTER TABLE students ADD COLUMN is_active INTEGER DEFAULT 1')\n    except sqlite3.OperationalError:\n        pass\n    \n    # Initialize site_settings with default values if empty\n    c.execute('INSERT OR IGNORE INTO site_settings (id) VALUES (1)')\n    \n    conn.commit()\n    conn.close()\n\n# Helper function to check file extension\ndef allowed_file(filename):\n    \"\"\"Check if file has allowed extension - validates image file types\"\"\"\n    if not filename:\n        return False\n    # Extract extension and check against allowed types\n    if '.' in filename:\n        ext = filename.rsplit('.', 1)[1].lower()\n        # Accept common image formats and be permissive for flexibility\n        return ext in ALLOWED_EXTENSIONS or ext in {'tif', 'tiff', 'jfif', 'pjpeg', 'pjp'}\n    return False\n\n# Database helper functions\ndef get_db():\n    \"\"\"Get database connection\"\"\"\n    conn = sqlite3.connect('ecocycle.db')\n    conn.row_factory = sqlite3.Row\n    return conn\n\n# Authentication helper functions\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\ndef hash_password(password):\n    \"\"\"Hash a password using Werkzeug's secure password hashing\"\"\"\n    return generate_password_hash(password, method='pbkdf2:sha256', salt_length=16)\n\ndef admin_required(f):\n    \"\"\"Decorator to require admin login for routes\"\"\"\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if 'admin_id' not in session:\n            return redirect(url_for('admin_login'))\n        return f(*args, **kwargs)\n    return decorated_function\n\n# Routes\n\n@app.route('/')\ndef landing():\n    \"\"\"New landing page with stats and information\"\"\"\n    return render_template('landing.html')\n\n@app.route('/register')\ndef index():\n    \"\"\"User registration page\"\"\"\n    return render_template('index.html')\n\n@app.route('/user/login', methods=['GET', 'POST'])\ndef user_login():\n    \"\"\"User login page and authentication\"\"\"\n    if request.method == 'POST':\n        username = request.form.get('username')\n        password = request.form.get('password')\n        \n        if not all([username, password]):\n            return jsonify({'success': False, 'message': 'Username and password required'}), 400\n        \n        conn = get_db()\n        user = conn.execute('SELECT * FROM students WHERE username = ?', (username,)).fetchone()\n        conn.close()\n        \n        if not user or not user['password_hash'] or not check_password_hash(user['password_hash'], password):\n            return jsonify({'success': False, 'message': 'Invalid credentials'}), 401\n        \n        # Check if account is active\n        if ('is_active' in user.keys() and user['is_active'] == 0):\n            return jsonify({'success': False, 'message': 'Your account has been deactivated. Please contact support.'}), 403\n        \n        session['student_id'] = user['id']\n        session['student_name'] = user['name']\n        session['student_username'] = user['username']\n        return jsonify({'success': True, 'redirect': url_for('user_dashboard')})\n    \n    return render_template('user_login.html')\n\n@app.route('/user/dashboard')\ndef user_dashboard():\n    \"\"\"User dashboard with stats and quick actions\"\"\"\n    if 'student_id' not in session:\n        return redirect(url_for('user_login'))\n    \n    conn = get_db()\n    student_id = session['student_id']\n    \n    # Get user details\n    user = conn.execute('SELECT * FROM students WHERE id = ?', (student_id,)).fetchone()\n    \n    # Get total waste logs count\n    total_waste_logs = conn.execute('SELECT COUNT(*) as count FROM waste_logs WHERE student_id = ?', \n                                     (student_id,)).fetchone()['count']\n    \n    # Get redeemed rewards\n    redeemed = conn.execute('''SELECT r.name, r.points_required, rr.redeemed_at\n                              FROM redeemed_rewards rr\n                              JOIN rewards r ON rr.reward_id = r.id\n                              WHERE rr.student_id = ?\n                              ORDER BY rr.redeemed_at DESC LIMIT 5''', (student_id,)).fetchall()\n    \n    # Get recent waste logs\n    recent_logs = conn.execute('''SELECT * FROM waste_logs \n                                 WHERE student_id = ? \n                                 ORDER BY logged_at DESC LIMIT 5''', (student_id,)).fetchall()\n    \n    conn.close()\n    \n    return render_template('user_dashboard.html', \n                         user=user, \n                         total_waste_logs=total_waste_logs,\n                         redeemed_rewards=redeemed,\n                         recent_logs=recent_logs)\n\n@app.route('/register', methods=['POST'])\ndef register_student():\n    \"\"\"Register a new user\"\"\"\n    name = request.form.get('name')\n    department = request.form.get('department')\n    residence = request.form.get('residence')\n    username = request.form.get('username')\n    password = request.form.get('password')\n    phone = request.form.get('phone')\n    \n    if not all([name, department, residence, username, password]):\n        return jsonify({'success': False, 'message': 'All fields are required'}), 400\n    \n    conn = get_db()\n    \n    # Check if username already exists\n    existing = conn.execute('SELECT id FROM students WHERE username = ?', (username,)).fetchone()\n    if existing:\n        conn.close()\n        return jsonify({'success': False, 'message': 'Username already exists'}), 400\n    \n    # Hash the password\n    password_hash = hash_password(password)\n    \n    # Insert new user\n    c = conn.cursor()\n    c.execute('INSERT INTO students (name, department, residence, username, phone, password_hash) VALUES (?, ?, ?, ?, ?, ?)',\n              (name, department, residence, username, phone, password_hash))\n    student_id = c.lastrowid\n    conn.commit()\n    conn.close()\n    \n    # Store student ID in session\n    session['student_id'] = student_id\n    session['student_name'] = name\n    \n    return jsonify({'success': True, 'redirect': url_for('user_dashboard')})\n\n@app.route('/about')\ndef about():\n    \"\"\"About page with mission, how it works, and developer profiles\"\"\"\n    conn = get_db()\n    developers = conn.execute('SELECT * FROM developers ORDER BY id').fetchall()\n    conn.close()\n    return render_template('about.html', developers=developers)\n\n@app.route('/waste-logs')\ndef waste_logs():\n    \"\"\"Waste logs page showing all waste categories and entries\"\"\"\n    if 'student_id' not in session:\n        return redirect(url_for('index'))\n    \n    conn = get_db()\n    student_id = session['student_id']\n    \n    # Get all waste logs for current student\n    logs = conn.execute('''SELECT * FROM waste_logs \n                          WHERE student_id = ? \n                          ORDER BY logged_at DESC''', (student_id,)).fetchall()\n    \n    # Get student points\n    student = conn.execute('SELECT points FROM students WHERE id = ?', (student_id,)).fetchone()\n    points = student['points'] if student else 0\n    \n    conn.close()\n    \n    return render_template('waste_logs.html', logs=logs, points=points)\n\n@app.route('/add-waste', methods=['POST'])\ndef add_waste():\n    \"\"\"Add a new waste log entry with photo upload or QR/barcode scanning\"\"\"\n    if 'student_id' not in session:\n        return jsonify({'success': False, 'message': 'Not logged in'}), 401\n    \n    waste_type = request.form.get('waste_type')\n    quantity = int(request.form.get('quantity', 1))\n    scanned_code = request.form.get('scanned_code', '')\n    \n    if not waste_type:\n        return jsonify({'success': False, 'message': 'Waste type is required'}), 400\n    \n    # Handle photo upload\n    image_path = None\n    if 'waste_image' in request.files:\n        file = request.files['waste_image']\n        if file and file.filename and allowed_file(file.filename):\n            filename = secure_filename(file.filename)\n            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n            filename = f\"{timestamp}_{filename}\"\n            filepath = os.path.join(app.config['UPLOAD_FOLDER'], 'waste', filename)\n            file.save(filepath)\n            image_path = f'uploads/waste/{filename}'\n    \n    # Require either scanned code or photo (1kg = 10 points)\n    if not scanned_code and not image_path:\n        return jsonify({'success': False, 'message': 'Please provide either a barcode/QR code scan or upload a photo of the waste'}), 400\n    \n    # Points calculation: 1kg of waste = 10 points\n    points_per_kg = 10\n    points_earned = quantity * points_per_kg\n    \n    conn = get_db()\n    student_id = session['student_id']\n    \n    # Add waste log with pending approval status\n    conn.execute('''INSERT INTO waste_logs (student_id, waste_type, quantity, points_earned, scanned_code, image_path, approval_status) \n                   VALUES (?, ?, ?, ?, ?, ?, 'pending')''', \n                   (student_id, waste_type, quantity, points_earned, scanned_code, image_path))\n    \n    # Don't update student points yet - points awarded only after admin approval\n    \n    conn.commit()\n    conn.close()\n    \n    return jsonify({'success': True, 'message': 'Waste log submitted for approval (1kg = 10 points)', 'points_earned': points_earned})\n\n@app.route('/available-rewards')\ndef available_rewards():\n    \"\"\"Show all available rewards\"\"\"\n    if 'student_id' not in session:\n        return redirect(url_for('index'))\n    \n    conn = get_db()\n    rewards = conn.execute('SELECT * FROM rewards WHERE available = 1 ORDER BY points_required').fetchall()\n    \n    # Get current student points\n    student = conn.execute('SELECT points FROM students WHERE id = ?', \n                          (session['student_id'],)).fetchone()\n    points = student['points'] if student else 0\n    \n    conn.close()\n    \n    return render_template('available_rewards.html', rewards=rewards, points=points)\n\n@app.route('/redeem-reward', methods=['POST'])\ndef redeem_reward():\n    \"\"\"Redeem a reward\"\"\"\n    if 'student_id' not in session:\n        return jsonify({'success': False, 'message': 'Not logged in'}), 401\n    \n    reward_id = request.form.get('reward_id')\n    \n    conn = get_db()\n    student_id = session['student_id']\n    \n    # Get reward details\n    reward = conn.execute('SELECT * FROM rewards WHERE id = ? AND available = 1', \n                         (reward_id,)).fetchone()\n    \n    if not reward:\n        conn.close()\n        return jsonify({'success': False, 'message': 'Reward not available'}), 400\n    \n    # Get student points\n    student = conn.execute('SELECT points FROM students WHERE id = ?', \n                          (student_id,)).fetchone()\n    \n    if student['points'] < reward['points_required']:\n        conn.close()\n        return jsonify({'success': False, 'message': 'Insufficient points'}), 400\n    \n    # Redeem reward\n    conn.execute('INSERT INTO redeemed_rewards (student_id, reward_id) VALUES (?, ?)',\n                (student_id, reward_id))\n    \n    # Deduct points\n    conn.execute('UPDATE students SET points = points - ? WHERE id = ?',\n                (reward['points_required'], student_id))\n    \n    conn.commit()\n    conn.close()\n    \n    return jsonify({'success': True, 'message': 'Reward redeemed successfully!'})\n\n@app.route('/rewards-dashboard')\ndef rewards_dashboard():\n    \"\"\"Rewards dashboard with leaderboard and user stats\"\"\"\n    if 'student_id' not in session:\n        return redirect(url_for('index'))\n    \n    conn = get_db()\n    student_id = session['student_id']\n    \n    # Get current student stats\n    student = conn.execute('SELECT * FROM students WHERE id = ?', (student_id,)).fetchone()\n    \n    # Get redeemed rewards for current student\n    redeemed = conn.execute('''SELECT r.name, r.points_required, rr.redeemed_at\n                              FROM redeemed_rewards rr\n                              JOIN rewards r ON rr.reward_id = r.id\n                              WHERE rr.student_id = ?\n                              ORDER BY rr.redeemed_at DESC''', (student_id,)).fetchall()\n    \n    # Get leaderboard (top 10 students by total points earned)\n    leaderboard = conn.execute('''SELECT name, department, residence, total_points_earned \n                                 FROM students \n                                 ORDER BY total_points_earned DESC \n                                 LIMIT 10''').fetchall()\n    \n    conn.close()\n    \n    return render_template('rewards_dashboard.html', \n                         student=student, \n                         redeemed_rewards=redeemed,\n                         leaderboard=leaderboard)\n\n@app.route('/admin/add-reward', methods=['GET', 'POST'])\n@admin_required\ndef add_reward():\n    \"\"\"Admin page to add new rewards\"\"\"\n    if request.method == 'POST':\n        name = request.form.get('name')\n        description = request.form.get('description')\n        points_required = request.form.get('points_required')\n        \n        # Handle file upload with validation\n        image_path = None\n        if 'image' in request.files:\n            file = request.files['image']\n            if file and file.filename and allowed_file(file.filename):\n                filename = secure_filename(file.filename)\n                filepath = os.path.join(app.config['UPLOAD_FOLDER'], 'rewards', filename)\n                file.save(filepath)\n                image_path = f'uploads/rewards/{filename}'\n        \n        conn = get_db()\n        conn.execute('''INSERT INTO rewards (name, description, points_required, image_path)\n                       VALUES (?, ?, ?, ?)''', (name, description, points_required, image_path))\n        conn.commit()\n        conn.close()\n        \n        return jsonify({'success': True, 'message': 'Reward added successfully'})\n    \n    return render_template('add_reward.html')\n\n@app.route('/admin/add-developer', methods=['GET', 'POST'])\n@admin_required\ndef add_developer():\n    \"\"\"Admin page to add developer profiles\"\"\"\n    if request.method == 'POST':\n        name = request.form.get('name')\n        role = request.form.get('role')\n        bio = request.form.get('bio', '')\n        \n        # Handle file upload with validation\n        image_path = None\n        if 'image' in request.files:\n            file = request.files['image']\n            if file and file.filename and allowed_file(file.filename):\n                filename = secure_filename(file.filename)\n                filepath = os.path.join(app.config['UPLOAD_FOLDER'], 'developers', filename)\n                file.save(filepath)\n                image_path = f'uploads/developers/{filename}'\n        \n        conn = get_db()\n        conn.execute('''INSERT INTO developers (name, role, bio, image_path)\n                       VALUES (?, ?, ?, ?)''', (name, role, bio, image_path))\n        conn.commit()\n        conn.close()\n        \n        return jsonify({'success': True, 'message': 'Developer added successfully'})\n    \n    return render_template('add_developer.html')\n\n@app.route('/uploads/<path:filename>')\ndef serve_uploaded_file(filename):\n    \"\"\"Serve uploaded files (images for rewards and developers)\"\"\"\n    from flask import send_from_directory\n    return send_from_directory('uploads', filename)\n\n@app.route('/download-project')\ndef download_project():\n    \"\"\"Generate and download the complete project as a ZIP file\"\"\"\n    memory_file = io.BytesIO()\n    \n    with zipfile.ZipFile(memory_file, 'w', zipfile.ZIP_DEFLATED) as zf:\n        # Add all project files\n        for root, dirs, files in os.walk('.'):\n            # Skip certain directories\n            if any(skip in root for skip in ['.git', '__pycache__', '.pythonlibs', 'node_modules', '.replit']):\n                continue\n            \n            for file in files:\n                # Skip database and cache files\n                if file.endswith(('.db', '.pyc', '.pyo')):\n                    continue\n                \n                file_path = os.path.join(root, file)\n                arcname = file_path.replace('./', '')\n                zf.write(file_path, arcname)\n    \n    memory_file.seek(0)\n    \n    return send_file(\n        memory_file,\n        mimetype='application/zip',\n        as_attachment=True,\n        download_name='ecocycle_project.zip'\n    )\n\n@app.route('/admin/approve-waste/<int:log_id>', methods=['POST'])\n@admin_required\ndef approve_waste_log(log_id):\n    \"\"\"Approve a waste log and award points\"\"\"\n    conn = get_db()\n    \n    # Get the waste log\n    log = conn.execute('SELECT * FROM waste_logs WHERE id = ?', (log_id,)).fetchone()\n    \n    if not log:\n        conn.close()\n        return jsonify({'success': False, 'message': 'Log not found'}), 404\n    \n    # Approve the log\n    conn.execute('''UPDATE waste_logs \n                   SET approval_status = \"approved\", approved_by = ?\n                   WHERE id = ?''', (session['admin_id'], log_id))\n    \n    # Award points to student (both current points and total points earned)\n    conn.execute('''UPDATE students \n                   SET points = points + ?, \n                       total_points_earned = total_points_earned + ? \n                   WHERE id = ?''',\n                (log['points_earned'], log['points_earned'], log['student_id']))\n    \n    conn.commit()\n    conn.close()\n    \n    return jsonify({'success': True, 'message': 'Waste log approved and points awarded'})\n\n@app.route('/admin/reject-waste/<int:log_id>', methods=['POST'])\n@admin_required\ndef reject_waste_log(log_id):\n    \"\"\"Reject a waste log\"\"\"\n    conn = get_db()\n    \n    conn.execute('''UPDATE waste_logs \n                   SET approval_status = \"rejected\", approved_by = ?\n                   WHERE id = ?''', (session['admin_id'], log_id))\n    \n    conn.commit()\n    conn.close()\n    \n    return jsonify({'success': True, 'message': 'Waste log rejected'})\n\n@app.route('/admin/delete-reward/<int:reward_id>', methods=['POST'])\n@admin_required\ndef delete_reward(reward_id):\n    \"\"\"Delete a reward\"\"\"\n    conn = get_db()\n    conn.execute('DELETE FROM rewards WHERE id = ?', (reward_id,))\n    conn.commit()\n    conn.close()\n    \n    return jsonify({'success': True, 'message': 'Reward deleted successfully'})\n\n@app.route('/admin/delete-developer/<int:dev_id>', methods=['POST'])\n@admin_required\ndef delete_developer(dev_id):\n    \"\"\"Delete a developer profile\"\"\"\n    conn = get_db()\n    conn.execute('DELETE FROM developers WHERE id = ?', (dev_id,))\n    conn.commit()\n    conn.close()\n    \n    return jsonify({'success': True, 'message': 'Developer profile deleted successfully'})\n\n@app.route('/admin/delete-user/<int:user_id>', methods=['POST'])\n@admin_required\ndef delete_user(user_id):\n    \"\"\"Delete a user/student\"\"\"\n    conn = get_db()\n    \n    # Delete related records first\n    conn.execute('DELETE FROM waste_logs WHERE student_id = ?', (user_id,))\n    conn.execute('DELETE FROM redeemed_rewards WHERE student_id = ?', (user_id,))\n    \n    # Delete the user\n    conn.execute('DELETE FROM students WHERE id = ?', (user_id,))\n    \n    conn.commit()\n    conn.close()\n    \n    return jsonify({'success': True, 'message': 'User deleted successfully'})\n\n@app.route('/admin/edit-user-points/<int:user_id>', methods=['POST'])\n@admin_required\ndef edit_user_points(user_id):\n    \"\"\"Edit a user's points\"\"\"\n    new_points = request.form.get('points', type=int)\n    \n    if new_points is None or new_points < 0:\n        return jsonify({'success': False, 'message': 'Invalid points value'}), 400\n    \n    conn = get_db()\n    conn.execute('UPDATE students SET points = ? WHERE id = ?', (new_points, user_id))\n    conn.commit()\n    conn.close()\n    \n    return jsonify({'success': True, 'message': 'Points updated successfully'})\n\n@app.route('/admin/students')\n@admin_required\ndef admin_students():\n    \"\"\"View and manage all students\"\"\"\n    conn = get_db()\n    students = conn.execute('''SELECT s.*, \n                              (SELECT COUNT(*) FROM waste_logs WHERE student_id = s.id AND approval_status = \"approved\") as total_logs\n                              FROM students s \n                              ORDER BY s.points DESC''').fetchall()\n    conn.close()\n    \n    return render_template('admin_students.html', students=students)\n\n@app.route('/admin/dashboard')\n@admin_required\ndef admin_dashboard():\n    \"\"\"Comprehensive admin dashboard with analytics\"\"\"\n    conn = get_db()\n    \n    total_students = conn.execute('SELECT COUNT(*) as count FROM students').fetchone()['count']\n    total_waste_logs = conn.execute('SELECT COUNT(*) as count FROM waste_logs').fetchone()['count']\n    pending_approvals = conn.execute('SELECT COUNT(*) as count FROM waste_logs WHERE approval_status = \"pending\"').fetchone()['count']\n    total_rewards = conn.execute('SELECT COUNT(*) as count FROM rewards').fetchone()['count']\n    total_points_distributed = conn.execute('SELECT SUM(points) as total FROM students').fetchone()['total'] or 0\n    \n    # Convert query results to dicts\n    def rows_to_dicts(rows):\n        return [dict(r) for r in rows]\n\n    recent_students = rows_to_dicts(conn.execute(\n        'SELECT * FROM students ORDER BY created_at DESC LIMIT 10').fetchall())\n    \n    pending_logs = rows_to_dicts(conn.execute('''\n        SELECT wl.*, s.name as student_name, s.department \n        FROM waste_logs wl\n        JOIN students s ON wl.student_id = s.id\n        WHERE wl.approval_status = \"pending\"\n        ORDER BY wl.logged_at DESC\n    ''').fetchall())\n    \n    top_students = rows_to_dicts(conn.execute(\n        'SELECT * FROM students ORDER BY points DESC LIMIT 5').fetchall())\n    \n    waste_stats = rows_to_dicts(conn.execute('''\n        SELECT waste_type, COUNT(*) as count, SUM(quantity) as total_quantity\n        FROM waste_logs\n        WHERE approval_status = \"approved\"\n        GROUP BY waste_type\n    ''').fetchall())\n    \n    conn.close()\n    \n    return render_template('admin_dashboard.html',\n                           total_students=total_students,\n                           total_waste_logs=total_waste_logs,\n                           pending_approvals=pending_approvals,\n                           total_rewards=total_rewards,\n                           total_points_distributed=total_points_distributed,\n                           recent_students=recent_students,\n                           pending_logs=pending_logs,\n                           top_students=top_students,\n                           waste_stats=waste_stats)\n\n@app.route('/admin/login', methods=['GET', 'POST'])\ndef admin_login():\n    \"\"\"Admin login page and authentication\"\"\"\n    if request.method == 'POST':\n        username = request.form.get('username')\n        password = request.form.get('password')\n        \n        if not all([username, password]):\n            return jsonify({'success': False, 'message': 'Username and password required'}), 400\n        \n        conn = get_db()\n        admin = conn.execute('SELECT * FROM admins WHERE username = ?', (username,)).fetchone()\n        conn.close()\n        \n        if not admin or not admin['password_hash'] or not check_password_hash(admin['password_hash'], password):\n            return jsonify({'success': False, 'message': 'Invalid credentials'}), 401\n        \n        session['admin_id'] = admin['id']\n        session['admin_name'] = admin['full_name']\n        session['admin_username'] = admin['username']\n        return jsonify({'success': True, 'redirect': url_for('admin_dashboard')})\n    \n    return render_template('admin_login.html')\n\n@app.route('/admin/logout')\ndef admin_logout():\n    \"\"\"Admin logout\"\"\"\n    session.pop('admin_id', None)\n    session.pop('admin_name', None)\n    session.pop('admin_username', None)\n    return redirect(url_for('admin_login'))\n\n@app.route('/logout')\ndef logout():\n    \"\"\"Log out current student\"\"\"\n    session.clear()\n    return redirect(url_for('landing'))\n\n# API endpoints for landing page\n@app.route('/api/stats')\ndef get_stats():\n    \"\"\"Get overall statistics for landing page\"\"\"\n    conn = get_db()\n    \n    total_users = conn.execute('SELECT COUNT(*) as count FROM students').fetchone()['count']\n    total_points = conn.execute('SELECT SUM(total_points_earned) as total FROM students').fetchone()['total'] or 0\n    total_rewards = conn.execute('SELECT COUNT(*) as count FROM redeemed_rewards').fetchone()['count']\n    total_waste_logs = conn.execute('SELECT COUNT(*) as count FROM waste_logs WHERE approval_status = \"approved\"').fetchone()['count']\n    \n    conn.close()\n    \n    return jsonify({\n        'total_users': total_users,\n        'total_points_generated': total_points,\n        'total_rewards_given': total_rewards,\n        'total_waste_logs': total_waste_logs\n    })\n\n@app.route('/api/booths')\ndef get_booths():\n    \"\"\"Get all waste collection booth locations\"\"\"\n    conn = get_db()\n    booths = conn.execute('SELECT * FROM booths').fetchall()\n    conn.close()\n    \n    booths_list = [dict(booth) for booth in booths]\n    return jsonify({'booths': booths_list})\n\n@app.route('/api/leaderboard/departments')\ndef get_department_leaderboard():\n    \"\"\"Get department leaderboard\"\"\"\n    conn = get_db()\n    departments = conn.execute('''\n        SELECT department, SUM(total_points_earned) as total_points, COUNT(*) as student_count\n        FROM students\n        GROUP BY department\n        ORDER BY total_points DESC\n        LIMIT 10\n    ''').fetchall()\n    conn.close()\n    \n    dept_list = [dict(dept) for dept in departments]\n    return jsonify({'departments': dept_list})\n\n@app.route('/api/leaderboard/halls')\ndef get_hall_leaderboard():\n    \"\"\"Get hall/residence leaderboard\"\"\"\n    conn = get_db()\n    halls = conn.execute('''\n        SELECT residence as hall, SUM(total_points_earned) as total_points, COUNT(*) as student_count\n        FROM students\n        GROUP BY residence\n        ORDER BY total_points DESC\n        LIMIT 10\n    ''').fetchall()\n    conn.close()\n    \n    hall_list = [dict(hall) for hall in halls]\n    return jsonify({'halls': hall_list})\n\n@app.route('/api/sponsors')\ndef get_sponsors():\n    \"\"\"Get all sponsors/collaborators\"\"\"\n    conn = get_db()\n    sponsors = conn.execute('SELECT * FROM sponsors ORDER BY id').fetchall()\n    conn.close()\n    \n    sponsor_list = [dict(sponsor) for sponsor in sponsors]\n    return jsonify({'sponsors': sponsor_list})\n\n@app.route('/admin/add-sponsor', methods=['GET', 'POST'])\n@admin_required\ndef add_sponsor():\n    \"\"\"Admin page to add sponsors/collaborators\"\"\"\n    if request.method == 'POST':\n        name = request.form.get('name')\n        website = request.form.get('website', '')\n        description = request.form.get('description', '')\n        \n        # Handle file upload with validation\n        logo_path = None\n        if 'logo' in request.files:\n            file = request.files['logo']\n            if file and file.filename and allowed_file(file.filename):\n                filename = secure_filename(file.filename)\n                filepath = os.path.join(app.config['UPLOAD_FOLDER'], 'sponsors', filename)\n                os.makedirs(os.path.dirname(filepath), exist_ok=True)\n                file.save(filepath)\n                logo_path = f'uploads/sponsors/{filename}'\n        \n        conn = get_db()\n        conn.execute('''INSERT INTO sponsors (name, logo_path, website, description)\n                       VALUES (?, ?, ?, ?)''', (name, logo_path, website, description))\n        conn.commit()\n        conn.close()\n        \n        return jsonify({'success': True, 'message': 'Sponsor added successfully'})\n    \n    return render_template('add_sponsor.html')\n\n@app.route('/admin/add-booth', methods=['GET', 'POST'])\n@admin_required\ndef add_booth():\n    \"\"\"Admin page to add waste collection booths\"\"\"\n    if request.method == 'POST':\n        name = request.form.get('name')\n        location_name = request.form.get('location_name')\n        latitude = float(request.form.get('latitude'))\n        longitude = float(request.form.get('longitude'))\n        opening_hours = request.form.get('opening_hours', '')\n        contact = request.form.get('contact', '')\n        \n        conn = get_db()\n        conn.execute('''INSERT INTO booths (name, location_name, latitude, longitude, opening_hours, contact)\n                       VALUES (?, ?, ?, ?, ?, ?)''', (name, location_name, latitude, longitude, opening_hours, contact))\n        conn.commit()\n        conn.close()\n        \n        return jsonify({'success': True, 'message': 'Booth added successfully'})\n    \n    return render_template('add_booth.html')\n\n@app.route('/admin/navbar-settings', methods=['GET', 'POST'])\n@admin_required\ndef navbar_settings():\n    \"\"\"Admin page to manage navbar background image\"\"\"\n    if request.method == 'POST':\n        # Handle navbar background image upload\n        if 'navbar_bg' in request.files:\n            file = request.files['navbar_bg']\n            if file and file.filename and allowed_file(file.filename):\n                filename = secure_filename(file.filename)\n                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n                filename = f\"navbar_bg_{timestamp}_{filename}\"\n                filepath = os.path.join(app.config['UPLOAD_FOLDER'], 'navbar', filename)\n                os.makedirs(os.path.dirname(filepath), exist_ok=True)\n                file.save(filepath)\n                image_path = f'uploads/navbar/{filename}'\n                \n                # Update settings in database\n                conn = get_db()\n                conn.execute('UPDATE site_settings SET navbar_bg_image = ?, updated_at = CURRENT_TIMESTAMP WHERE id = 1', (image_path,))\n                conn.commit()\n                conn.close()\n                \n                return jsonify({'success': True, 'message': 'Navbar background updated successfully'})\n        \n        return jsonify({'success': False, 'message': 'No file uploaded'}), 400\n    \n    # GET request - get current settings\n    conn = get_db()\n    settings = conn.execute('SELECT * FROM site_settings WHERE id = 1').fetchone()\n    conn.close()\n    \n    return render_template('navbar_settings.html', settings=settings)\n\n@app.route('/admin/remove-navbar-bg', methods=['POST'])\n@admin_required\ndef remove_navbar_bg():\n    \"\"\"Remove navbar background image\"\"\"\n    conn = get_db()\n    conn.execute('UPDATE site_settings SET navbar_bg_image = NULL, updated_at = CURRENT_TIMESTAMP WHERE id = 1')\n    conn.commit()\n    conn.close()\n    \n    return jsonify({'success': True, 'message': 'Navbar background removed'})\n\n@app.route('/api/site-settings')\ndef get_site_settings():\n    \"\"\"Get site settings for frontend\"\"\"\n    conn = get_db()\n    settings = conn.execute('SELECT * FROM site_settings WHERE id = 1').fetchone()\n    conn.close()\n    \n    return jsonify({\n        'navbar_bg_image': settings['navbar_bg_image'] if settings and settings['navbar_bg_image'] else None\n    })\n\n@app.route('/contact', methods=['GET', 'POST'])\ndef contact():\n    \"\"\"Contact us page and form submission\"\"\"\n    if request.method == 'POST':\n        name = request.form.get('name')\n        email = request.form.get('email')\n        subject = request.form.get('subject', '')\n        message = request.form.get('message')\n        \n        if not all([name, email, message]):\n            return jsonify({'success': False, 'message': 'Name, email, and message are required'}), 400\n        \n        conn = get_db()\n        conn.execute('''INSERT INTO contact_messages (name, email, subject, message)\n                       VALUES (?, ?, ?, ?)''', (name, email, subject, message))\n        conn.commit()\n        conn.close()\n        \n        return jsonify({'success': True, 'message': 'Message sent successfully! We will get back to you soon.'})\n    \n    return render_template('contact.html')\n\n@app.route('/admin/deactivate-student/<int:student_id>', methods=['POST'])\n@admin_required\ndef deactivate_student(student_id):\n    \"\"\"Deactivate a student account\"\"\"\n    conn = get_db()\n    conn.execute('UPDATE students SET is_active = 0 WHERE id = ?', (student_id,))\n    conn.commit()\n    conn.close()\n    \n    return jsonify({'success': True, 'message': 'Student account deactivated'})\n\n@app.route('/admin/activate-student/<int:student_id>', methods=['POST'])\n@admin_required\ndef activate_student(student_id):\n    \"\"\"Activate a student account\"\"\"\n    conn = get_db()\n    conn.execute('UPDATE students SET is_active = 1 WHERE id = ?', (student_id,))\n    conn.commit()\n    conn.close()\n    \n    return jsonify({'success': True, 'message': 'Student account activated'})\n\n@app.route('/admin/print-users')\n@admin_required\ndef print_users():\n    \"\"\"Print all users with their details\"\"\"\n    conn = get_db()\n    students = conn.execute('''SELECT id, name, username, phone, department, residence, \n                              points, total_points_earned, created_at, is_active\n                              FROM students \n                              ORDER BY created_at DESC''').fetchall()\n    \n    # Get site settings for logo\n    settings = conn.execute('SELECT * FROM site_settings WHERE id = 1').fetchone()\n    conn.close()\n    \n    return render_template('print_users.html', students=students, settings=settings)\n\n# Initialize database on startup\nif __name__ == '__main__':\n    init_db()\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":39534},"static/css/style.css":{"content":"/* Ecocycle - Eco-themed Styling with Green/Yellow/White Palette */\n\n/* CSS Variables for Color Scheme */\n:root {\n    --primary-green: #2ecc71;\n    --dark-green: #27ae60;\n    --light-green: #a8e6cf;\n    --accent-yellow: #f1c40f;\n    --dark-yellow: #f39c12;\n    --white: #ffffff;\n    --off-white: #f8f9fa;\n    --light-gray: #ecf0f1;\n    --gray: #95a5a6;\n    --dark-gray: #7f8c8d;\n    --text-dark: #2c3e50;\n    --shadow: rgba(0, 0, 0, 0.1);\n    --shadow-hover: rgba(0, 0, 0, 0.15);\n}\n\n/* Reset and Base Styles */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Poppins', sans-serif;\n    background-color: var(--off-white);\n    color: var(--text-dark);\n    line-height: 1.6;\n    overflow-x: hidden;\n}\n\n.container {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 0 20px;\n}\n\n/* Navigation Bar */\n.navbar {\n    background: linear-gradient(135deg, var(--primary-green) 0%, var(--dark-green) 100%);\n    padding: 1rem 0;\n    position: sticky;\n    top: 0;\n    z-index: 1000;\n    box-shadow: 0 2px 10px var(--shadow);\n}\n\n.nav-content {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n    \n.nav-links {\n    display: flex;\n    gap: 1.5rem;\n    align-items: center;\n}\n\n.nav-link {\n    color: var(--white);\n    text-decoration: none;\n    font-weight: 500;\n    padding: 8px 16px;\n    border-radius: 25px;\n    transition: all 0.3s ease;\n}\n\n.nav-link:hover {\n    background: rgba(255, 255, 255, 0.2);\n    transform: translateY(-2px);\n}\n\n.logout-btn {\n    background: var(--accent-yellow);\n    color: var(--text-dark);\n}\n\n.logout-btn:hover {\n    background: var(--dark-yellow);\n}\n\n.download-btn {\n    background: var(--dark-green);\n}\n\n.download-btn:hover {\n    background: var(--primary-green);\n}\n\n.menu-toggle {\n    display: none;\n    flex-direction: column;\n    gap: 5px;\n    cursor: pointer;\n}\n\n.menu-toggle span {\n    width: 25px;\n    height: 3px;\n    background: var(--white);\n    border-radius: 3px;\n    transition: all 0.3s ease;\n}\n\n/* Hero Section with Beautiful Background */\n.hero-section {\n    background: linear-gradient(135deg, var(--primary-green) 0%, var(--dark-green) 100%);\n    background-image: \n        linear-gradient(135deg, rgba(46, 204, 113, 0.9) 0%, rgba(39, 174, 96, 0.9) 100%),\n        url('data:image/svg+xml,<svg width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\"><defs><pattern id=\"grid\" width=\"100\" height=\"100\" patternUnits=\"userSpaceOnUse\"><path d=\"M 100 0 L 0 0 0 100\" fill=\"none\" stroke=\"rgba(255,255,255,0.1)\" stroke-width=\"1\"/></pattern></defs><rect width=\"100\" height=\"100\" fill=\"url(%23grid)\"/></svg>');\n    color: var(--white);\n    padding: 80px 0;\n    text-align: center;\n    position: relative;\n    overflow: hidden;\n}\n\n.hero-section::before {\n    content: '';\n    position: absolute;\n    top: -50%;\n    right: -50%;\n    width: 200%;\n    height: 200%;\n    background: radial-gradient(circle, rgba(255,255,255,0.1) 1px, transparent 1px);\n    background-size: 50px 50px;\n    animation: drift 20s linear infinite;\n}\n\n@keyframes drift {\n    0% { transform: translate(0, 0); }\n    100% { transform: translate(50px, 50px); }\n}\n\n.hero-content {\n    max-width: 800px;\n    margin: 0 auto;\n}\n\n.hero-title {\n    font-size: 3rem;\n    font-weight: 700;\n    margin-bottom: 1rem;\n}\n\n.hero-subtitle {\n    font-size: 1.3rem;\n    font-weight: 300;\n}\n\n/* Registration Section with Subtle Background */\n.registration-section {\n    padding: 60px 0;\n    background: linear-gradient(to bottom, #f8f9fa 0%, #ffffff 100%);\n    position: relative;\n}\n\n.registration-section::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-image: radial-gradient(circle at 20% 50%, rgba(46, 204, 113, 0.05) 0%, transparent 50%),\n                      radial-gradient(circle at 80% 80%, rgba(241, 196, 15, 0.05) 0%, transparent 50%);\n    pointer-events: none;\n}\n\n.registration-card {\n    max-width: 500px;\n    margin: 0 auto;\n    background: var(--white);\n    padding: 40px;\n    border-radius: 15px;\n    box-shadow: 0 5px 20px var(--shadow);\n}\n\n.registration-card h2 {\n    color: var(--primary-green);\n    margin-bottom: 10px;\n    text-align: center;\n}\n\n.card-subtitle {\n    text-align: center;\n    color: var(--gray);\n    margin-bottom: 30px;\n}\n\n/* Form Styles */\n.form-group {\n    margin-bottom: 20px;\n}\n\n.form-group label {\n    display: block;\n    margin-bottom: 8px;\n    font-weight: 500;\n    color: var(--text-dark);\n}\n\n.form-group input,\n.form-group select,\n.form-group textarea {\n    width: 100%;\n    padding: 12px 15px;\n    border: 2px solid var(--light-gray);\n    border-radius: 8px;\n    font-family: 'Poppins', sans-serif;\n    font-size: 1rem;\n    transition: all 0.3s ease;\n}\n\n.form-group input:focus,\n.form-group select:focus,\n.form-group textarea:focus {\n    outline: none;\n    border-color: var(--primary-green);\n    box-shadow: 0 0 0 3px rgba(46, 204, 113, 0.1);\n}\n\n.form-group small {\n    display: block;\n    margin-top: 5px;\n    color: var(--gray);\n    font-size: 0.85rem;\n}\n\n/* Buttons */\n.btn {\n    padding: 12px 30px;\n    border: none;\n    border-radius: 25px;\n    font-family: 'Poppins', sans-serif;\n    font-size: 1rem;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    text-decoration: none;\n    display: inline-block;\n}\n\n.btn-primary {\n    background: linear-gradient(135deg, var(--primary-green) 0%, var(--dark-green) 100%);\n    color: var(--white);\n    width: 100%;\n}\n\n.btn-primary:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 5px 15px var(--shadow-hover);\n}\n\n.btn-secondary {\n    background: var(--gray);\n    color: var(--white);\n}\n\n.btn-secondary:hover {\n    background: var(--dark-gray);\n}\n\n.btn-add {\n    background: var(--accent-yellow);\n    color: var(--text-dark);\n    padding: 8px 20px;\n    font-size: 0.9rem;\n}\n\n.btn-add:hover {\n    background: var(--dark-yellow);\n    transform: translateY(-2px);\n}\n\n.btn-redeem {\n    background: var(--primary-green);\n    color: var(--white);\n    padding: 8px 20px;\n    font-size: 0.9rem;\n}\n\n.btn-redeem:hover {\n    background: var(--dark-green);\n}\n\n.btn-disabled {\n    background: var(--gray);\n    cursor: not-allowed;\n    opacity: 0.6;\n}\n\n.btn-disabled:hover {\n    transform: none;\n    background: var(--gray);\n}\n\n/* Page Header */\n.page-header {\n    background: linear-gradient(135deg, var(--primary-green) 0%, var(--dark-green) 100%);\n    color: var(--white);\n    padding: 50px 0;\n    text-align: center;\n}\n\n.page-title {\n    font-size: 2.5rem;\n    font-weight: 700;\n    margin-bottom: 10px;\n}\n\n.points-display {\n    font-size: 1.2rem;\n    margin-top: 15px;\n}\n\n.points-label {\n    font-weight: 400;\n}\n\n.points-value {\n    font-weight: 700;\n    font-size: 1.5rem;\n    color: var(--accent-yellow);\n}\n\n/* About Page */\n.about-hero {\n    background: linear-gradient(135deg, var(--primary-green) 0%, var(--dark-green) 100%);\n    color: var(--white);\n    padding: 60px 0;\n    text-align: center;\n}\n\n.page-subtitle {\n    font-size: 1.2rem;\n    font-weight: 300;\n    margin-top: 10px;\n}\n\n.about-section {\n    padding: 60px 0;\n}\n\n.motto-section {\n    text-align: center;\n    padding: 40px 0;\n    margin-bottom: 40px;\n}\n\n.motto-icon {\n    font-size: 4rem;\n    margin-bottom: 20px;\n}\n\n.motto-text {\n    font-size: 2rem;\n    color: var(--primary-green);\n    font-weight: 600;\n    font-style: italic;\n}\n\n.mission-section {\n    background: var(--white);\n    padding: 40px;\n    border-radius: 15px;\n    box-shadow: 0 5px 20px var(--shadow);\n    margin-bottom: 40px;\n}\n\n.mission-section h2 {\n    color: var(--primary-green);\n    margin-bottom: 20px;\n}\n\n.mission-section p {\n    line-height: 1.8;\n    margin-bottom: 15px;\n}\n\n.how-it-works-section {\n    margin-bottom: 60px;\n}\n\n.how-it-works-section h2 {\n    text-align: center;\n    color: var(--primary-green);\n    margin-bottom: 40px;\n    font-size: 2rem;\n}\n\n.steps-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 30px;\n}\n\n.step-card {\n    background: var(--white);\n    padding: 30px;\n    border-radius: 15px;\n    box-shadow: 0 5px 20px var(--shadow);\n    text-align: center;\n    transition: all 0.3s ease;\n    position: relative;\n}\n\n.step-card:hover {\n    transform: translateY(-10px);\n    box-shadow: 0 10px 30px var(--shadow-hover);\n}\n\n.step-number {\n    position: absolute;\n    top: -15px;\n    right: 20px;\n    background: var(--accent-yellow);\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-weight: 700;\n    font-size: 1.2rem;\n    color: var(--text-dark);\n}\n\n.step-icon {\n    font-size: 3rem;\n    margin-bottom: 15px;\n}\n\n.step-card h3 {\n    color: var(--primary-green);\n    margin-bottom: 10px;\n}\n\n/* Developers Section */\n.developers-section {\n    margin-top: 60px;\n}\n\n.developers-section h2 {\n    text-align: center;\n    color: var(--primary-green);\n    margin-bottom: 10px;\n    font-size: 2rem;\n}\n\n.section-subtitle {\n    text-align: center;\n    color: var(--gray);\n    margin-bottom: 40px;\n}\n\n.developers-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n    gap: 30px;\n}\n\n.developer-card {\n    background: var(--white);\n    padding: 30px;\n    border-radius: 15px;\n    box-shadow: 0 5px 20px var(--shadow);\n    text-align: center;\n    transition: all 0.3s ease;\n}\n\n.developer-card:hover {\n    transform: translateY(-10px);\n    box-shadow: 0 10px 30px var(--shadow-hover);\n}\n\n.developer-image {\n    width: 150px;\n    height: 150px;\n    margin: 0 auto 20px;\n    border-radius: 50%;\n    overflow: hidden;\n    border: 5px solid var(--light-green);\n}\n\n.developer-image img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n}\n\n.developer-placeholder {\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(135deg, var(--primary-green) 0%, var(--dark-green) 100%);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 3rem;\n    font-weight: 700;\n    color: var(--white);\n}\n\n.developer-card h3 {\n    color: var(--text-dark);\n    margin-bottom: 8px;\n}\n\n.developer-role {\n    color: var(--primary-green);\n    font-weight: 600;\n    margin-bottom: 15px;\n}\n\n.developer-bio {\n    color: var(--gray);\n    font-size: 0.9rem;\n    line-height: 1.6;\n}\n\n.no-developers {\n    text-align: center;\n    padding: 40px;\n}\n\n.admin-note {\n    margin-top: 10px;\n    color: var(--gray);\n}\n\n.admin-note a {\n    color: var(--primary-green);\n    font-weight: 600;\n}\n\n/* Search Container */\n.search-container {\n    margin: 30px 0;\n}\n\n.search-input {\n    width: 100%;\n    padding: 15px 20px;\n    border: 2px solid var(--light-gray);\n    border-radius: 25px;\n    font-family: 'Poppins', sans-serif;\n    font-size: 1rem;\n    transition: all 0.3s ease;\n}\n\n.search-input:focus {\n    outline: none;\n    border-color: var(--primary-green);\n    box-shadow: 0 0 0 3px rgba(46, 204, 113, 0.1);\n}\n\n/* Waste Logs */\n.waste-logs-section {\n    padding: 60px 0;\n}\n\n.categories-section {\n    margin: 40px 0;\n}\n\n.categories-section h2 {\n    color: var(--primary-green);\n    margin-bottom: 30px;\n}\n\n.categories-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 20px;\n}\n\n.category-card {\n    background: var(--white);\n    padding: 30px;\n    border-radius: 15px;\n    box-shadow: 0 5px 20px var(--shadow);\n    text-align: center;\n    transition: all 0.3s ease;\n}\n\n.category-card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 10px 30px var(--shadow-hover);\n}\n\n.category-icon {\n    font-size: 3rem;\n    margin-bottom: 15px;\n}\n\n.category-card h3 {\n    color: var(--text-dark);\n    margin-bottom: 20px;\n    font-size: 1.1rem;\n}\n\n/* Logs Table */\n.logs-section {\n    margin-top: 40px;\n}\n\n.logs-section h2 {\n    color: var(--primary-green);\n    margin-bottom: 20px;\n}\n\n.logs-table-container {\n    background: var(--white);\n    border-radius: 15px;\n    box-shadow: 0 5px 20px var(--shadow);\n    overflow-x: auto;\n}\n\n.logs-table {\n    width: 100%;\n    border-collapse: collapse;\n}\n\n.logs-table thead {\n    background: linear-gradient(135deg, var(--primary-green) 0%, var(--dark-green) 100%);\n    color: var(--white);\n}\n\n.logs-table th,\n.logs-table td {\n    padding: 15px;\n    text-align: left;\n}\n\n.logs-table tbody tr {\n    border-bottom: 1px solid var(--light-gray);\n    transition: background 0.3s ease;\n}\n\n.logs-table tbody tr:hover {\n    background: var(--off-white);\n}\n\n.points-cell {\n    color: var(--primary-green);\n    font-weight: 600;\n}\n\n.no-data {\n    text-align: center;\n    padding: 40px;\n    color: var(--gray);\n}\n\n/* Rewards Grid */\n.rewards-section {\n    padding: 60px 0;\n}\n\n.rewards-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n    gap: 30px;\n    margin-top: 30px;\n}\n\n.reward-card {\n    background: var(--white);\n    border-radius: 15px;\n    box-shadow: 0 5px 20px var(--shadow);\n    overflow: hidden;\n    transition: all 0.3s ease;\n}\n\n.reward-card:hover {\n    transform: translateY(-10px);\n    box-shadow: 0 10px 30px var(--shadow-hover);\n}\n\n.reward-image {\n    width: 100%;\n    height: 200px;\n    overflow: hidden;\n    background: var(--light-gray);\n}\n\n.reward-image img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n}\n\n.reward-placeholder {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 4rem;\n    background: linear-gradient(135deg, var(--light-green) 0%, var(--primary-green) 100%);\n}\n\n.reward-content {\n    padding: 20px;\n}\n\n.reward-content h3 {\n    color: var(--text-dark);\n    margin-bottom: 10px;\n}\n\n.reward-description {\n    color: var(--gray);\n    font-size: 0.9rem;\n    margin-bottom: 15px;\n    min-height: 40px;\n}\n\n.reward-footer {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-top: 15px;\n}\n\n.reward-points {\n    font-weight: 600;\n    color: var(--text-dark);\n}\n\n.points-required {\n    color: var(--primary-green);\n    font-size: 1.3rem;\n}\n\n.no-rewards {\n    text-align: center;\n    padding: 60px 20px;\n}\n\n/* Dashboard */\n.dashboard-section {\n    padding: 60px 0;\n}\n\n.stats-card {\n    background: var(--white);\n    padding: 40px;\n    border-radius: 15px;\n    box-shadow: 0 5px 20px var(--shadow);\n    margin-bottom: 40px;\n}\n\n.stats-card h2 {\n    color: var(--primary-green);\n    margin-bottom: 30px;\n}\n\n.stats-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 30px;\n}\n\n.stat-item {\n    display: flex;\n    align-items: center;\n    gap: 20px;\n    padding: 20px;\n    background: var(--off-white);\n    border-radius: 10px;\n    transition: all 0.3s ease;\n}\n\n.stat-item:hover {\n    transform: translateX(10px);\n    background: var(--light-green);\n}\n\n.stat-icon {\n    font-size: 3rem;\n}\n\n.stat-content h3 {\n    color: var(--text-dark);\n    font-size: 1.8rem;\n    margin-bottom: 5px;\n}\n\n.stat-content p {\n    color: var(--gray);\n}\n\n/* Redeemed Section */\n.redeemed-section {\n    background: var(--white);\n    padding: 40px;\n    border-radius: 15px;\n    box-shadow: 0 5px 20px var(--shadow);\n    margin-bottom: 40px;\n}\n\n.redeemed-section h2 {\n    color: var(--primary-green);\n    margin-bottom: 30px;\n}\n\n.redeemed-list {\n    display: grid;\n    gap: 20px;\n}\n\n.redeemed-item {\n    display: flex;\n    align-items: center;\n    gap: 20px;\n    padding: 20px;\n    background: var(--off-white);\n    border-radius: 10px;\n    border-left: 5px solid var(--primary-green);\n}\n\n.redeemed-icon {\n    width: 50px;\n    height: 50px;\n    background: var(--primary-green);\n    color: var(--white);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 1.5rem;\n    font-weight: 700;\n}\n\n.redeemed-content h3 {\n    color: var(--text-dark);\n    margin-bottom: 5px;\n}\n\n.redeemed-points {\n    color: var(--primary-green);\n    font-weight: 600;\n    font-size: 0.9rem;\n}\n\n.redeemed-date {\n    color: var(--gray);\n    font-size: 0.85rem;\n}\n\n/* Leaderboard */\n.leaderboard-section {\n    background: var(--white);\n    padding: 40px;\n    border-radius: 15px;\n    box-shadow: 0 5px 20px var(--shadow);\n}\n\n.leaderboard-section h2 {\n    color: var(--primary-green);\n    margin-bottom: 10px;\n    text-align: center;\n}\n\n.leaderboard-table {\n    overflow-x: auto;\n    margin-top: 20px;\n}\n\n.leaderboard-table table {\n    width: 100%;\n    border-collapse: collapse;\n}\n\n.leaderboard-table thead {\n    background: linear-gradient(135deg, var(--primary-green) 0%, var(--dark-green) 100%);\n    color: var(--white);\n}\n\n.leaderboard-table th,\n.leaderboard-table td {\n    padding: 15px;\n    text-align: left;\n}\n\n.leaderboard-row {\n    border-bottom: 1px solid var(--light-gray);\n    transition: all 0.3s ease;\n}\n\n.leaderboard-row:hover {\n    background: var(--off-white);\n}\n\n.rank-cell {\n    font-size: 1.5rem;\n    text-align: center;\n}\n\n.top-1 {\n    background: linear-gradient(135deg, #ffd700 0%, #ffed4e 100%);\n}\n\n.top-2 {\n    background: linear-gradient(135deg, #c0c0c0 0%, #e8e8e8 100%);\n}\n\n.top-3 {\n    background: linear-gradient(135deg, #cd7f32 0%, #e6a75e 100%);\n}\n\n/* Modal */\n.modal {\n    display: none;\n    position: fixed;\n    z-index: 2000;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    animation: fadeIn 0.3s ease;\n}\n\n.modal-content {\n    background-color: var(--white);\n    margin: 10% auto;\n    padding: 40px;\n    border-radius: 15px;\n    max-width: 500px;\n    box-shadow: 0 10px 40px var(--shadow);\n    animation: slideDown 0.3s ease;\n}\n\n.close {\n    color: var(--gray);\n    float: right;\n    font-size: 28px;\n    font-weight: bold;\n    cursor: pointer;\n    transition: color 0.3s ease;\n}\n\n.close:hover {\n    color: var(--text-dark);\n}\n\n.modal-content h2 {\n    color: var(--primary-green);\n    margin-bottom: 20px;\n}\n\n.modal-actions {\n    display: flex;\n    gap: 15px;\n    margin-top: 30px;\n}\n\n.modal-actions .btn {\n    flex: 1;\n}\n\n/* Admin Section */\n.admin-section {\n    padding: 60px 0;\n}\n\n.admin-card {\n    max-width: 600px;\n    margin: 0 auto;\n    background: var(--white);\n    padding: 40px;\n    border-radius: 15px;\n    box-shadow: 0 5px 20px var(--shadow);\n}\n\n/* Footer */\n.footer {\n    background: linear-gradient(135deg, var(--dark-green) 0%, var(--primary-green) 100%);\n    color: var(--white);\n    text-align: center;\n    padding: 20px 0;\n    margin-top: 60px;\n}\n\n/* Animations */\n@keyframes fadeIn {\n    from {\n        opacity: 0;\n    }\n    to {\n        opacity: 1;\n    }\n}\n\n@keyframes slideDown {\n    from {\n        transform: translateY(-50px);\n        opacity: 0;\n    }\n    to {\n        transform: translateY(0);\n        opacity: 1;\n    }\n}\n\n@keyframes slideUp {\n    from {\n        transform: translateY(50px);\n        opacity: 0;\n    }\n    to {\n        transform: translateY(0);\n        opacity: 1;\n    }\n}\n\n.fade-in {\n    animation: fadeIn 0.8s ease;\n}\n\n.slide-up {\n    animation: slideUp 0.8s ease;\n}\n\n/* Responsive Design */\n@media (max-width: 968px) {\n    .container {\n        padding: 0 15px;\n    }\n\n    .logs-table-container,\n    .leaderboard-table {\n        overflow-x: auto;\n        -webkit-overflow-scrolling: touch;\n    }\n\n    .logs-table,\n    .leaderboard-table table {\n        min-width: 600px;\n    }\n\n    .admin-nav-links {\n        flex-wrap: wrap;\n        gap: 10px;\n    }\n\n    .admin-nav-link {\n        font-size: 0.9rem;\n        padding: 6px 12px;\n    }\n}\n\n@media (max-width: 768px) {\n    .nav-links {\n        position: fixed;\n        left: -100%;\n        top: 70px;\n        flex-direction: column;\n        background: var(--dark-green);\n        width: 100%;\n        text-align: center;\n        transition: 0.3s;\n        box-shadow: 0 10px 27px rgba(0, 0, 0, 0.05);\n        padding: 20px 0;\n        z-index: 999;\n    }\n\n    .nav-links.active {\n        left: 0;\n    }\n\n    .menu-toggle {\n        display: flex;\n    }\n\n    .hero-section {\n        padding: 60px 0;\n    }\n\n    .hero-title {\n        font-size: 2rem;\n    }\n\n    .hero-subtitle {\n        font-size: 1rem;\n    }\n\n    .page-title {\n        font-size: 2rem;\n    }\n\n    .motto-text {\n        font-size: 1.5rem;\n    }\n\n    .steps-grid,\n    .categories-grid,\n    .rewards-grid,\n    .developers-grid {\n        grid-template-columns: 1fr;\n    }\n\n    .stats-grid {\n        grid-template-columns: 1fr;\n    }\n\n    .modal-content {\n        margin: 20% 20px;\n        padding: 30px 20px;\n    }\n\n    .registration-section,\n    .dashboard-section,\n    .waste-logs-section,\n    .rewards-section,\n    .about-section {\n        padding: 40px 0;\n    }\n\n    .stats-card,\n    .redeemed-section,\n    .leaderboard-section {\n        padding: 30px 20px;\n    }\n\n    .action-btn {\n        font-size: 0.75rem;\n        padding: 4px 8px;\n        display: block;\n        width: 100%;\n        margin: 4px 0;\n    }\n\n    .logs-table th,\n    .logs-table td,\n    .leaderboard-table th,\n    .leaderboard-table td {\n        padding: 10px 8px;\n        font-size: 0.9rem;\n    }\n\n    .reward-footer {\n        flex-direction: column;\n        gap: 10px;\n        align-items: flex-start;\n    }\n\n    .reward-footer .btn {\n        width: 100%;\n    }\n}\n\n@media (max-width: 480px) {\n    .logo-text {\n        font-size: 1.2rem;\n    }\n\n    .registration-card,\n    .admin-card {\n        padding: 30px 20px;\n        margin: 0 10px;\n    }\n\n    .hero-section {\n        padding: 40px 0;\n    }\n\n    .hero-title {\n        font-size: 1.5rem;\n    }\n\n    .hero-subtitle {\n        font-size: 0.9rem;\n    }\n\n    .page-title {\n        font-size: 1.5rem;\n    }\n\n    .btn {\n        padding: 10px 20px;\n        font-size: 0.9rem;\n    }\n\n    .form-group input,\n    .form-group select,\n    .form-group textarea {\n        font-size: 0.95rem;\n    }\n\n    .stat-icon {\n        font-size: 2rem;\n    }\n\n    .stat-content h3 {\n        font-size: 1.5rem;\n    }\n\n    .redeemed-item {\n        flex-direction: column;\n        align-items: flex-start;\n        padding: 15px;\n    }\n\n    .modal-content {\n        margin: 10% 10px;\n        padding: 20px 15px;\n    }\n\n    .modal-actions {\n        flex-direction: column;\n    }\n\n    .search-input {\n        padding: 10px 15px;\n        font-size: 0.9rem;\n    }\n\n    .admin-nav-links {\n        gap: 8px;\n    }\n\n    .admin-nav-link {\n        font-size: 0.8rem;\n        padding: 6px 10px;\n    }\n}\n\n\n\n\n\n/* ===== TEXT LOGO ===== */\n.logo {\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  margin-bottom: 1rem;\n}\n\n.logo-text {\n  font-family: 'Poppins', sans-serif;\n  font-weight: 800;\n  font-size: 2rem;\n  color: #ffffff; \n  letter-spacing: 0.5px;\n  display: flex;\n  align-items: center;\n  gap: 0.4rem;\n  transition: transform 0.2s ease, color 0.3s ease;\n}\n\n.logo-text:hover {\n  transform: scale(1.05);\n  color: yellow;\n}\n\n.logo-icon {\n  font-size: 1.8rem;\n}\n\n/* RESPONSIVENESS */\n@media (max-width: 768px) {\n  .logo-text {\n    font-size: 1.6rem;\n  }\n  .logo-icon {\n    font-size: 1.5rem;\n  }\n}\n\n@media (max-width: 480px) {\n  .logo-text {\n    font-size: 1.4rem;\n  }\n  .logo-icon {\n    font-size: 1.3rem;\n  }\n}\n\n/* ===== ENHANCED MOBILE RESPONSIVENESS ===== */\n\n/* Landing Page CTA Buttons */\n@media (max-width: 768px) {\n    .cta-buttons {\n        flex-direction: column;\n        align-items: center;\n        width: 100%;\n        padding: 0 20px;\n    }\n    \n    .cta-btn {\n        width: 100%;\n        max-width: 300px;\n        text-align: center;\n    }\n    \n    .hero-content {\n        padding: 0 15px;\n    }\n}\n\n/* Add Waste Modal Responsive */\n@media (max-width: 768px) {\n    #addWasteModal .modal-content {\n        width: 95%;\n        max-width: none;\n        margin: 5% auto;\n        max-height: 90vh;\n        overflow-y: auto;\n    }\n    \n    #addWasteModal h2 {\n        font-size: 1.3rem;\n    }\n    \n    #addWasteModal .form-group {\n        margin-bottom: 15px;\n    }\n    \n    #scannerSection {\n        margin-bottom: 15px;\n    }\n    \n    #reader {\n        max-width: 100%;\n    }\n}\n\n@media (max-width: 480px) {\n    #addWasteModal .modal-content {\n        padding: 20px 15px;\n        margin: 2% auto;\n    }\n    \n    #addWasteModal .close {\n        font-size: 2rem;\n        padding: 5px 10px;\n    }\n}\n\n/* Admin Table Responsive */\n@media (max-width: 968px) {\n    .admin-section {\n        overflow-x: auto;\n        -webkit-overflow-scrolling: touch;\n    }\n    \n    .admin-table {\n        min-width: 800px;\n    }\n    \n    .admin-stats-grid {\n        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n    }\n}\n\n@media (max-width: 480px) {\n    .admin-table {\n        font-size: 0.85rem;\n    }\n    \n    .admin-table th,\n    .admin-table td {\n        padding: 8px 6px;\n    }\n}\n\n/* Stats Grid Improvement */\n@media (max-width: 768px) {\n    .stats-grid {\n        grid-template-columns: 1fr;\n        gap: 15px;\n    }\n    \n    .stat-item {\n        padding: 20px;\n    }\n}\n\n@media (max-width: 480px) {\n    .stats-grid {\n        grid-template-columns: 1fr;\n    }\n}\n\n/* Page Header Responsiveness */\n@media (max-width: 768px) {\n    .page-header {\n        padding: 30px 0;\n    }\n    \n    .page-title {\n        font-size: 1.8rem;\n        padding: 0 15px;\n    }\n    \n    .page-subtitle {\n        padding: 0 15px;\n        font-size: 0.95rem;\n    }\n}\n\n/* Quick Actions Grid */\n@media (max-width: 768px) {\n    .actions-grid {\n        grid-template-columns: 1fr;\n        gap: 15px;\n    }\n    \n    .action-card {\n        padding: 25px 20px;\n    }\n}\n\n/* Booth Map Container */\n.booth-map-container {\n    width: 100%;\n    height: 400px;\n    border-radius: 10px;\n    overflow: hidden;\n    margin: 20px 0;\n}\n\n@media (max-width: 768px) {\n    .booth-map-container {\n        height: 300px;\n    }\n}\n\n@media (max-width: 480px) {\n    .booth-map-container {\n        height: 250px;\n    }\n}\n\n.login-link {\n    text-align: center;\n    margin-top: 1rem;\n    font-size: 0.95rem;\n    color: #555;\n}\n\n.text-link {\n    color: #007bff;\n    text-decoration: none;\n    font-weight: 500;\n}\n\n.text-link:hover {\n    text-decoration: underline;\n}\n","size_bytes":25875},"create_admin.py":{"content":"from werkzeug.security import generate_password_hash\r\nimport sqlite3\r\n\r\nusername = \"admin\"\r\npassword = \"admin123\"\r\nfull_name = \"System Administrator\"\r\nemail = \"admin@ecocycle.com\"\r\n\r\nconn = sqlite3.connect('ecocycle.db')\r\npassword_hash = generate_password_hash(password, method='pbkdf2:sha256', salt_length=16)\r\nconn.execute(\"INSERT INTO admins (username, password_hash, full_name, email) VALUES (?, ?, ?, ?)\",\r\n             (username, password_hash, full_name, email))\r\nconn.commit()\r\nconn.close()\r\n\r\nprint(\"✅ Admin created successfully! Username:\", username, \"Password:\", password)\r\n","size_bytes":587},"static/js/main.js":{"content":"// Ecocycle - Main JavaScript for Interactivity and Animations\n\n// Mobile Menu Toggle\ndocument.addEventListener('DOMContentLoaded', function() {\n    const menuToggle = document.getElementById('menuToggle');\n    const navLinks = document.getElementById('navLinks');\n    \n    if (menuToggle) {\n        menuToggle.addEventListener('click', function() {\n            navLinks.classList.toggle('active');\n            \n            // Animate hamburger menu\n            const spans = menuToggle.querySelectorAll('span');\n            spans[0].style.transform = navLinks.classList.contains('active') \n                ? 'rotate(45deg) translate(5px, 5px)' \n                : 'none';\n            spans[1].style.opacity = navLinks.classList.contains('active') ? '0' : '1';\n            spans[2].style.transform = navLinks.classList.contains('active') \n                ? 'rotate(-45deg) translate(7px, -6px)' \n                : 'none';\n        });\n    }\n    \n    // Close mobile menu when clicking on a link\n    const links = navLinks?.querySelectorAll('.nav-link');\n    if (links) {\n        links.forEach(link => {\n            link.addEventListener('click', () => {\n                navLinks.classList.remove('active');\n            });\n        });\n    }\n    \n    // Smooth scroll for anchor links\n    document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n        anchor.addEventListener('click', function (e) {\n            e.preventDefault();\n            const target = document.querySelector(this.getAttribute('href'));\n            if (target) {\n                target.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'start'\n                });\n            }\n        });\n    });\n    \n    // Animate elements on scroll\n    const observerOptions = {\n        threshold: 0.1,\n        rootMargin: '0px 0px -50px 0px'\n    };\n    \n    const observer = new IntersectionObserver(function(entries) {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                entry.target.style.opacity = '1';\n                entry.target.style.transform = 'translateY(0)';\n            }\n        });\n    }, observerOptions);\n    \n    // Observe all animated elements\n    document.querySelectorAll('.slide-up, .fade-in').forEach(el => {\n        el.style.opacity = '0';\n        el.style.transform = 'translateY(30px)';\n        el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';\n        observer.observe(el);\n    });\n    \n    // Add ripple effect to buttons\n    document.querySelectorAll('.btn').forEach(button => {\n        button.addEventListener('click', function(e) {\n            const ripple = document.createElement('span');\n            const rect = this.getBoundingClientRect();\n            const size = Math.max(rect.width, rect.height);\n            const x = e.clientX - rect.left - size / 2;\n            const y = e.clientY - rect.top - size / 2;\n            \n            ripple.style.width = ripple.style.height = size + 'px';\n            ripple.style.left = x + 'px';\n            ripple.style.top = y + 'px';\n            ripple.classList.add('ripple');\n            \n            this.appendChild(ripple);\n            \n            setTimeout(() => ripple.remove(), 600);\n        });\n    });\n});\n\n// Form validation helper\nfunction validateForm(formId) {\n    const form = document.getElementById(formId);\n    if (!form) return false;\n    \n    const inputs = form.querySelectorAll('input[required], select[required], textarea[required]');\n    let isValid = true;\n    \n    inputs.forEach(input => {\n        if (!input.value.trim()) {\n            isValid = false;\n            input.style.borderColor = '#e74c3c';\n        } else {\n            input.style.borderColor = '#ecf0f1';\n        }\n    });\n    \n    return isValid;\n}\n\n// Show notification\nfunction showNotification(message, type = 'success') {\n    const notification = document.createElement('div');\n    notification.className = `notification notification-${type}`;\n    notification.textContent = message;\n    notification.style.cssText = `\n        position: fixed;\n        top: 80px;\n        right: 20px;\n        padding: 15px 25px;\n        background: ${type === 'success' ? '#2ecc71' : '#e74c3c'};\n        color: white;\n        border-radius: 8px;\n        box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n        z-index: 9999;\n        animation: slideIn 0.3s ease;\n    `;\n    \n    document.body.appendChild(notification);\n    \n    setTimeout(() => {\n        notification.style.animation = 'slideOut 0.3s ease';\n        setTimeout(() => notification.remove(), 300);\n    }, 3000);\n}\n\n// Loading state helper\nfunction setLoadingState(button, isLoading) {\n    if (isLoading) {\n        button.disabled = true;\n        button.dataset.originalText = button.innerHTML;\n        button.innerHTML = '<span>Loading...</span>';\n    } else {\n        button.disabled = false;\n        button.innerHTML = button.dataset.originalText;\n    }\n}\n\n// Number animation helper\nfunction animateNumber(element, start, end, duration) {\n    const range = end - start;\n    const increment = range / (duration / 16);\n    let current = start;\n    \n    const timer = setInterval(() => {\n        current += increment;\n        if ((increment > 0 && current >= end) || (increment < 0 && current <= end)) {\n            element.textContent = end;\n            clearInterval(timer);\n        } else {\n            element.textContent = Math.floor(current);\n        }\n    }, 16);\n}\n\n// Debounce helper for search inputs\nfunction debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            clearTimeout(timeout);\n            func(...args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n}\n\n// Export for use in other scripts\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = {\n        validateForm,\n        showNotification,\n        setLoadingState,\n        animateNumber,\n        debounce\n    };\n}\n\n// Add CSS for ripple effect\nconst style = document.createElement('style');\nstyle.textContent = `\n    .btn {\n        position: relative;\n        overflow: hidden;\n    }\n    \n    .ripple {\n        position: absolute;\n        border-radius: 50%;\n        background: rgba(255, 255, 255, 0.5);\n        transform: scale(0);\n        animation: ripple-animation 0.6s ease-out;\n        pointer-events: none;\n    }\n    \n    @keyframes ripple-animation {\n        to {\n            transform: scale(4);\n            opacity: 0;\n        }\n    }\n    \n    @keyframes slideIn {\n        from {\n            transform: translateX(100%);\n            opacity: 0;\n        }\n        to {\n            transform: translateX(0);\n            opacity: 1;\n        }\n    }\n    \n    @keyframes slideOut {\n        from {\n            transform: translateX(0);\n            opacity: 1;\n        }\n        to {\n            transform: translateX(100%);\n            opacity: 0;\n        }\n    }\n`;\ndocument.head.appendChild(style);\n\nconsole.log('Ecocycle initialized successfully! 🌱');\n","size_bytes":7048}},"version":2}